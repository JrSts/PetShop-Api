generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  nome              String
  email             String          @unique
  telefone          String          @unique
  senha             String
  tipoUsuario       TipoUsuario     @default(ADMIN)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt()
  fornecedor        Fornecedor?
  tutor             Tutor?
  admin             Admin?
  transacoesCliente TransacaoUser[]
  endereco          Endereco?
}

enum TipoUsuario {
  FORNECEDOR
  TUTOR
  ADMIN
}

model Fornecedor {
  id        String    @id @default(uuid())
  produtos  Produto[]
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
}

model Tutor {
  id        String   @id @default(uuid())
  pets      Pet[]
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Admin {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Pet {
  id        String            @id @default(uuid())
  tutorId   String
  nome      String
  categoria String
  raca      String
  idade     Int
  tutor     Tutor             @relation(fields: [tutorId], references: [id])
  servicos  ServicosPorPets[]
}

model Servico {
  id        String            @id @default(uuid())
  nome      String
  valor     Float
  horario   DateTime
  pagamento Boolean
  pets      ServicosPorPets[]
}

// Definição do modelo de ServicosPorPets
model ServicosPorPets {
  servicoId       String
  petId           String
  servico         Servico        @relation(fields: [servicoId], references: [id])
  pet             Pet            @relation(fields: [petId], references: [id])
  horario         DateTime
  pagamento       Boolean
  formaPagamento  FormaPagamento @default(DINHEIRO)
  TransacaoUser   TransacaoUser? @relation(fields: [transacaoUserId], references: [id])
  transacaoUserId String?

  @@id([petId, servicoId])
}

// Enumeração de Forma de Pagamento
enum FormaPagamento {
  DINHEIRO
  CREDITO
  DEBITO
  PIX
  BOLETO
}

// Definição do modelo de Endereco
model Endereco {
  id          String  @id @default(uuid())
  rua         String
  numero      Int
  bairro      String
  cidade      String
  complemento String
  user        User?   @relation(fields: [userId], references: [id])
  userId      String? @unique
}

// Definição do modelo de Produto
model Produto {
  id              String         @id @default(uuid())
  nome            String
  descricao       String
  preco           Float
  quantidade      Int
  dataValidade    DateTime
  fornecedorId    String         @unique
  transacaoUserId String?
  delivery        Boolean
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt()
  fornecedor      Fornecedor     @relation(fields: [fornecedorId], references: [id])
  TransacaoUser   TransacaoUser? @relation(fields: [transacaoUserId], references: [id])
}

// Definição do modelo de TransacaoCliente
model TransacaoUser {
  id        String            @id @default(uuid())
  userId    String
  valor     Decimal
  produtos  Produto[]
  servicos  ServicosPorPets[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt()
  user      User              @relation(fields: [userId], references: [id])
}
